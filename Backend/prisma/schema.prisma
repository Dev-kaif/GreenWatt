generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String?
  firstName     String?
  lastName      String?
  phoneNumber   String?
  householdSize Int?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appliances    Appliance[]
  tips          EnergyTip[]
  readings      MeterReading[]
  userProfile   UserProfile?
}

model UserProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  targetReduction Float?
  electricityRatePerKWh Float? 
  ecoGoals        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model Appliance {
  id                     String    @id @default(uuid())
  userId                 String
  type                   String
  modelName              String?
  ageYears               Int?
  purchaseDate           DateTime?
  energyStarRating       String?
  powerConsumptionWatts  Float?
  energyEfficiencyRating String?
  averageDailyUsageHours Float?
  capacity               String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id])
}

model MeterReading {
  id                   String      @id @default(uuid())
  userId               String
  readingDate          DateTime
  consumptionKWH       Float
  emissionCO2kg        Float?
  source               String?     @default("manual")
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  contextualEnergyTips EnergyTip[] @relation("TipContext")
  user                 User        @relation(fields: [userId], references: [id])

  @@unique([userId, readingDate])
}

model EnergyTip {
  id               String            @id @default(uuid())
  userId           String
  generalTipId     String?
  tipText          String
  relevanceScore   Float?
  applicableMonth  DateTime?
  isDismissed      Boolean           @default(false)
  isImplemented    Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  contextReadingId String?
  contextReading   MeterReading?     @relation("TipContext", fields: [contextReadingId], references: [id])
  GeneralEnergyTip GeneralEnergyTip? @relation(fields: [generalTipId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
}

model GlobalContent {
  id          String   @id @default(uuid())
  type        String
  title       String?
  content     String
  source      String?
  url         String?
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminUser {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         String   @default("editor")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserEmbedding {
  id         String                 @id @default(dbgenerated("gen_random_uuid()"))
  createdAt  DateTime               @default(now())
  updatedAt  DateTime?              @default(now()) @updatedAt
  embedding  Unsupported("vector")?
  metadata   Json?
  created_at DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at DateTime?              @default(now()) @db.Timestamptz(6)
  content    String?

  @@map("user_embeddings")
}

model GeneralEnergyTip {
  id          String      @id
  title       String
  description String
  category    String?
  ecoLink     String?
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  EnergyTip   EnergyTip[]
}
